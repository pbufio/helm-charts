apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pbuf-registry.fullname" . }}
  labels:
    {{- include "pbuf-registry.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "pbuf-registry.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "pbuf-registry.labels" . | nindent 8 }}
	    {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        date: "{{ now | unixEpoch }}"
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "pbuf-registry.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
          args:
            - -c
            - /app/pbuf-migrations && /app/pbuf-registry
          env:
            - name: DATA_DATABASE_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ include "pbuf-registry.fullname" . }}
                  key: DATA_DATABASE_DSN
            - name: SERVER_STATIC_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "pbuf-registry.fullname" . }}
                  key: SERVER_STATIC_TOKEN
            - name: SERVER_GRPC_TLS_ENABLED
              value: "{{ .Values.service.grpc.tls.enabled }}"
            - name: SERVER_GRPC_TLS_CERTFILE
              value: /app/certs/server-cert.pem
            - name: SERVER_GRPC_TLS_KEYFILE
              value: /app/certs/server-key.pem
            - name: SERVER_GRPC_AUTH_ENABLED
              value: "{{ .Values.service.grpc.auth.enabled }}"
            - name: SERVER_GRPC_AUTH_TYPE
              value: "{{ .Values.service.grpc.auth.type }}"
            - name: SERVER_HTTP_AUTH_ENABLED
              value: "{{ .Values.service.http.auth.enabled }}"
            - name: SERVER_HTTP_AUTH_TYPE
              value: "{{ .Values.service.http.auth.type }}"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 6777
              protocol: TCP
            - name: debug
              containerPort: 8082
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: debug
          readinessProbe:
            httpGet:
              path: /healthz
              port: debug
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /app/certs/server-cert.pem
              name: secret
              readOnly: true
              subPath: server-cert.pem
            - mountPath: /app/certs/server-key.pem
              name: secret
              readOnly: true
              subPath: server-key.pem
      {{- with .Values.customSidecarContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: secret
        secret:
          secretName: {{ include "pbuf-registry.fullname" . }}
